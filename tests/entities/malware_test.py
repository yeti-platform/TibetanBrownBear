"""Tests for the Malware entity."""

import pytest

from yeti.core.errors import ValidationError
from yeti.core.entities.malware import Malware

@pytest.mark.usefixtures('clean_db')
def test_malware_creation():
    """Tests the creation of a single malware."""
    mal = Malware(name='Gootkit')
    assert mal.id is None
    mal = mal.save()
    assert isinstance(mal, Malware)
    assert mal.id is not None

@pytest.mark.usefixtures('clean_db', 'populate_malware')
def test_malware_attributes():
    """Tests that a created Malware has all needed attributes."""
    allitems = Malware.list()
    for malware in allitems:
        assert hasattr(malware, 'family')
        assert isinstance(malware.family, list)

@pytest.mark.usefixtures('clean_db')
def test_malware_fetch():
    """Tests creating a Malware object and saving it."""
    mal = Malware(name='Gootkit').save()
    fetched_mal = Malware.get(mal.id)
    assert isinstance(fetched_mal, Malware)
    assert fetched_mal.id == mal.id

@pytest.mark.usefixtures('clean_db')
def test_invalid_malware_family():
    """Tests that malware can't be created with invalid families."""
    with pytest.raises(ValidationError):
        Malware(name="123", family='asd').save()

@pytest.mark.usefixtures('clean_db')
def test_get_or_create():
    """Tests that names are normalized when calling get_or_create."""
    mal = Malware.get_or_create(name='Gootkit')
    assert mal.name == 'Gootkit'
